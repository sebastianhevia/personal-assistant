// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: tasks.sql

package db

import (
	"context"
	"time"
)

const createTask = `-- name: CreateTask :exec
INSERT INTO tasks (name, status, due_date, priority) VALUES (?, ?, ?, ?)
`

type CreateTaskParams struct {
	Name     string    `json:"name"`
	Status   string    `json:"status"`
	DueDate  time.Time `json:"due_date"`
	Priority int64     `json:"priority"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) error {
	_, err := q.db.ExecContext(ctx, createTask,
		arg.Name,
		arg.Status,
		arg.DueDate,
		arg.Priority,
	)
	return err
}

const getTasks = `-- name: GetTasks :many
SELECT id, name, status, due_date, priority FROM tasks WHERE status = ?
`

func (q *Queries) GetTasks(ctx context.Context, status string) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getTasks, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Status,
			&i.DueDate,
			&i.Priority,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
